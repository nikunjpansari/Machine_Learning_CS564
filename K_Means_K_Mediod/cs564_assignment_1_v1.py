# -*- coding: utf-8 -*-
"""CS564_Assignment_1_v1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pH1yYk_0afDpXwFTyeGHD6eedkls4RMQ

## Installing the required libraries . 
[Matplotlib - plotting
Pandas (exporting the csv) 
Scikit-learn to import metrics and packages]
"""

pip install scikit-learn-extra

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd 
import seaborn as sns
from sklearn import metrics
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
from sklearn.preprocessing import MinMaxScaler
from sklearn.decomposition import PCA
from sklearn_extra.cluster import KMedoids

"""## Mounting the CSV files on the Google drive to make it easy for importing"""

from google.colab import drive
drive.mount('/content/drive')

"""## Reading the Country data CSV file """

dc= pd.read_csv('/content/drive/MyDrive/CS564/Country-data.csv')
## Displaying the data
dc.head()

"""## Data Cleaning (Checking NULL or NAN values)"""

## Checking Null Values 
print('NULL Value : ',dc.isnull().sum().sum())
## Checking NAN Values
print('NAN Value :',dc.isnull().sum().sum())

"""## Data Scaling"""

## Drop the Country column for applying the Scaling
dc_no_country=dc.drop(['country'],axis=1)

scaling = MinMaxScaler()
dc_scaled=scaling.fit_transform(dc_no_country)
dc_scaled=pd.DataFrame(dc_scaled,columns=dc_no_country.columns)

## Displaying the Scaled data
dc_scaled

"""## Using the Principal Component Analysis (PCA) for Dimensionality Reduction"""

## Converting into 2 D data
mn = PCA(n_components=2)
pca_data = mn.fit_transform(dc_scaled)
dc_pca = pd.DataFrame(data = pca_data , columns = ['x', 'y'])

"""## Applying KMeans Clustering with no of Clusters as 3 for Under-developed,Developing and the developed countries"""

## Applying the K-Means
pca_kmeans= KMeans(n_clusters = 3,random_state = 101)
## Fitting the data
pca_kmeans.fit(dc_pca)
pd.Series(pca_kmeans.labels_).value_counts()

## For each country,predicting the Cluster number
prediction = pca_kmeans.labels_
dc_pca_cluster=pd.DataFrame(dc_pca)
dc_cluster_data = pd.DataFrame(dc)
dc_cluster_data['KMeans_Clusters'] = prediction
dc_pca_cluster['KMeans_Clusters']=prediction

"""## Plotting the Clusters for 3 different types of countries for K-Means"""

sns.scatterplot(dc_pca_cluster['x'],dc_pca_cluster['y'],hue='KMeans_Clusters',data=dc_pca_cluster,palette=['red','blue','brown'], legend='full') 
plt.title("KMeans Clustering",fontsize=15)
plt.xlabel("PCA 1", fontsize=12)
plt.ylabel("PCA 2", fontsize=12)
#plt.legend(["Under-developing","Developing","Developed"], loc ="upper left")
plt.figure(figsize=(13, 13))
plt.show()

"""## Calculating the Silhouette Score for Kmeans for 3 Clusters pertaining to the type of country"""

print('Silhouette Score for K-Means :',metrics.silhouette_score(dc_pca, pca_kmeans.labels_))

## Displaying the list of all types of Countries
print('------------------------------------------------')
print("Number of Under Developing countries",len(dc_cluster_data[dc_cluster_data['KMeans_Clusters']==1]['country']))
print('Under Devloping Countries',list(dc_cluster_data[dc_cluster_data['KMeans_Clusters']==1]['country'])) 
print('------------------------------------------------')
print("Number of Developing countries",len(dc_cluster_data[dc_cluster_data['KMeans_Clusters']==0]['country']))
print('Developing Countries',list(dc_cluster_data[dc_cluster_data['KMeans_Clusters']==0]['country'])) 
print('------------------------------------------------')
print("Number of Developed countries",len(dc_cluster_data[dc_cluster_data['KMeans_Clusters']==2]['country']))
print('Developed Countries',list(dc_cluster_data[dc_cluster_data['KMeans_Clusters']==2]['country']))

"""## Applying K-mediods for 3 Clusters"""

## Applying K-Mediod
dc_kmediod= KMedoids(n_clusters = 3,random_state = 111)
## Fitting the data
dc_kmediod.fit(dc_pca)
pd.Series(dc_kmediod.labels_).value_counts()

## For each country,predicting the Cluster number
prediction_med = dc_kmediod.labels_
dc_kmediod_data=pd.DataFrame(dc_pca)
dc_mediod_cluster = pd.DataFrame(dc)
dc_mediod_cluster['KMedoids_Clusters'] = prediction_med
dc_kmediod_data['KMedoids_Clusters']=prediction_med

"""## Plotting the Clusters for 3 different types of countries for K-Mediod"""

sns.scatterplot(dc_kmediod_data['x'],dc_kmediod_data['y'],hue='KMeans_Clusters',data=dc_kmediod_data,palette=['red','blue','brown'], legend='full') 
plt.title("Kmediod Approach",fontsize=15)
plt.xlabel("PCA 1", fontsize=12)
plt.ylabel("PCA 2", fontsize=12)
#plt.legend(["Under-developing","Developing","Developed"], loc ="upper left")
plt.figure(figsize=(13, 13))
plt.show()

"""## Calculating the Silhouette Score for Kmediod for 3 Clusters pertaining to the type of country"""

print('Silhouette Score for K-Mediod :',metrics.silhouette_score(dc_pca, dc_kmediod.labels_))

## Displaying the list of all types of Countries
print('------------------------------------------------')
print("Number of Under Developing countries",len(dc_mediod_cluster[dc_mediod_cluster['KMedoids_Clusters']==1]['country']))
print('Under Devloping Countries',list(dc_mediod_cluster[dc_mediod_cluster['KMedoids_Clusters']==1]['country'])) 
print('------------------------------------------------')
print("Number of Developing countries",len(dc_mediod_cluster[dc_mediod_cluster['KMedoids_Clusters']==0]['country']))
print('Developing Countries',list(dc_mediod_cluster[dc_mediod_cluster['KMedoids_Clusters']==0]['country'])) 
print('------------------------------------------------')
print("Number of Developed countries",len(dc_mediod_cluster[dc_mediod_cluster['KMedoids_Clusters']==2]['country']))
print('Developed Countries',list(dc_mediod_cluster[dc_mediod_cluster['KMedoids_Clusters']==2]['country']))