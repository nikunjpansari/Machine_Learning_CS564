# -*- coding: utf-8 -*-
"""2211MC21_Assigment_04.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_jlXmBSx5m34_jNPskdCCF4bZtycEZIq

## Importing the required libraries & the dataset also
"""

import numpy as np
import pandas as pd
from tensorflow.keras.datasets import cifar10
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import *
from tensorflow.keras.optimizers.experimental import SGD
from tensorflow.keras.utils import to_categorical

"""## Loading the dataset"""

(X_train,y_train) , (X_test, y_test) = cifar10.load_data()

"""## Dimension of the train & test data"""

print('X train : ',X_train.shape)
print('X test : ',X_test.shape)
print('Y train :',y_train.shape)
print('Y test : ',y_test.shape)

"""## Each of the train & test data contain 10 classes"""

y_cat_train  = to_categorical(y_train, 10)
y_cat_test = to_categorical(y_test, 10)

"""## Feed Forward neural network layerwise"""

model_FFNN = Sequential()
## Input layer
model_FFNN.add(Input(shape=(32,32,3)))
model_FFNN.add(Flatten())
## Hidden layer details
model_FFNN.add(Dense(1024, activation="relu"))
model_FFNN.add(Dense(512, activation = "relu"))
model_FFNN.add(Dense(256, activation = "relu"))
model_FFNN.add(Dense(128, activation = "relu"))
model_FFNN.add(Dense(64, activation = "relu"))
model_FFNN.add(Dense(32, activation = "relu"))
## Output layer details
model_FFNN.add(Dense(10, activation = "softmax"))

print(model_FFNN.summary())
## 
opt = SGD(learning_rate = 0.000001, momentum=0.9)
model_FFNN.compile(loss = "categorical_crossentropy", optimizer = opt, metrics = ["accuracy"])

model_FFNN.fit(X_train, y_cat_train, validation_data = (X_test, y_cat_test), epochs = 50, batch_size = 128)

metrics_FFNN = pd.DataFrame(model_FFNN.history.history)
metrics_FFNN

metrics_FFNN[["loss", "accuracy"]].plot()

metrics_FFNN[["val_loss", "val_accuracy"]].plot()

"""## Implementation of Recurrent Nueral Network (RNN) for CIFAR10 datset"""

model = Sequential()
model.add(Input(shape=(32,32,3)))
model.add(Flatten())
model.add(Reshape((1, 3072)))
model.add(SimpleRNN(1024, activation="relu"))
model.add(Reshape((1, 1024)))
model.add(SimpleRNN(1024, activation = "relu"))
model.add(Reshape((1, 1024)))
model.add(SimpleRNN(1024, activation = "relu"))
model.add(Dense(10, activation = "softmax"))

print(model.summary())
## 
opt = SGD(learning_rate = 0.000001, momentum=0.9)
model.compile(loss = "categorical_crossentropy", optimizer = opt, metrics = ["accuracy"])

model.fit(X_train, y_cat_train, validation_data = (X_test, y_cat_test), epochs = 50, batch_size = 128)

metrics = pd.DataFrame(model.history.history)
metrics

metrics[["loss", "accuracy"]].plot()

metrics[["val_loss", "val_accuracy"]].plot()